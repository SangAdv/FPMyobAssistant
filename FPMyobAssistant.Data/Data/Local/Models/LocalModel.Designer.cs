//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 13/08/2019 5:23:46 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace LocalModelContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class LocalModelDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(LocalModelDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertTLDDHLCustomerNumber(TLDDHLCustomerNumber instance);
        partial void UpdateTLDDHLCustomerNumber(TLDDHLCustomerNumber instance);
        partial void DeleteTLDDHLCustomerNumber(TLDDHLCustomerNumber instance);
        partial void InsertTLMPLAccount(TLMPLAccount instance);
        partial void UpdateTLMPLAccount(TLMPLAccount instance);
        partial void DeleteTLMPLAccount(TLMPLAccount instance);
        partial void InsertTLMReport(TLMReport instance);
        partial void UpdateTLMReport(TLMReport instance);
        partial void DeleteTLMReport(TLMReport instance);
        partial void InsertTLMReportHeading(TLMReportHeading instance);
        partial void UpdateTLMReportHeading(TLMReportHeading instance);
        partial void DeleteTLMReportHeading(TLMReportHeading instance);
        partial void InsertTLDPLBudget(TLDPLBudget instance);
        partial void UpdateTLDPLBudget(TLDPLBudget instance);
        partial void DeleteTLDPLBudget(TLDPLBudget instance);
        partial void InsertTLDPL(TLDPL instance);
        partial void UpdateTLDPL(TLDPL instance);
        partial void DeleteTLDPL(TLDPL instance);
        partial void InsertTLDB(TLDB instance);
        partial void UpdateTLDB(TLDB instance);
        partial void DeleteTLDB(TLDB instance);
        partial void InsertTLMBSAccount(TLMBSAccount instance);
        partial void UpdateTLMBSAccount(TLMBSAccount instance);
        partial void DeleteTLMBSAccount(TLMBSAccount instance);
        partial void InsertTLDKKCustomerNumber(TLDKKCustomerNumber instance);
        partial void UpdateTLDKKCustomerNumber(TLDKKCustomerNumber instance);
        partial void DeleteTLDKKCustomerNumber(TLDKKCustomerNumber instance);
        partial void InsertTLDDHLInvoiceExclusion(TLDDHLInvoiceExclusion instance);
        partial void UpdateTLDDHLInvoiceExclusion(TLDDHLInvoiceExclusion instance);
        partial void DeleteTLDDHLInvoiceExclusion(TLDDHLInvoiceExclusion instance);
        partial void InsertTLSSetting(TLSSetting instance);
        partial void UpdateTLSSetting(TLSSetting instance);
        partial void DeleteTLSSetting(TLSSetting instance);
        partial void InsertTLSSyncLog(TLSSyncLog instance);
        partial void UpdateTLSSyncLog(TLSSyncLog instance);
        partial void DeleteTLSSyncLog(TLSSyncLog instance);
        partial void InsertTLSUpdateLog(TLSUpdateLog instance);
        partial void UpdateTLSUpdateLog(TLSUpdateLog instance);
        partial void DeleteTLSUpdateLog(TLSUpdateLog instance);
        partial void InsertTLDBSBudget(TLDBSBudget instance);
        partial void UpdateTLDBSBudget(TLDBSBudget instance);
        partial void DeleteTLDBSBudget(TLDBSBudget instance);
        partial void InsertTLMReportStructure(TLMReportStructure instance);
        partial void UpdateTLMReportStructure(TLMReportStructure instance);
        partial void DeleteTLMReportStructure(TLMReportStructure instance);
        partial void InsertTLDDistributorProductAccountId(TLDDistributorProductAccountId instance);
        partial void UpdateTLDDistributorProductAccountId(TLDDistributorProductAccountId instance);
        partial void DeleteTLDDistributorProductAccountId(TLDDistributorProductAccountId instance);
        partial void InsertTLMDistributor(TLMDistributor instance);
        partial void UpdateTLMDistributor(TLMDistributor instance);
        partial void DeleteTLMDistributor(TLMDistributor instance);
        partial void InsertTLDRepto(TLDRepto instance);
        partial void UpdateTLDRepto(TLDRepto instance);
        partial void DeleteTLDRepto(TLDRepto instance);

        #endregion

        public LocalModelDataContext() :
        base(GetConnectionString("LocalModelDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public LocalModelDataContext(MappingSource mappingSource) :
        base(GetConnectionString("LocalModelDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public LocalModelDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LocalModelDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LocalModelDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public LocalModelDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<TLDDHLCustomerNumber> TLDDHLCustomerNumbers
        {
            get
            {
                return this.GetTable<TLDDHLCustomerNumber>();
            }
        }

        public Devart.Data.Linq.Table<TLMPLAccount> TLMPLAccounts
        {
            get
            {
                return this.GetTable<TLMPLAccount>();
            }
        }

        public Devart.Data.Linq.Table<TLMReport> TLMReports
        {
            get
            {
                return this.GetTable<TLMReport>();
            }
        }

        public Devart.Data.Linq.Table<TLMReportHeading> TLMReportHeadings
        {
            get
            {
                return this.GetTable<TLMReportHeading>();
            }
        }

        public Devart.Data.Linq.Table<TLDPLBudget> TLDPLBudgets
        {
            get
            {
                return this.GetTable<TLDPLBudget>();
            }
        }

        public Devart.Data.Linq.Table<TLDPL> TLDPLs
        {
            get
            {
                return this.GetTable<TLDPL>();
            }
        }

        public Devart.Data.Linq.Table<TLDB> TLDBs
        {
            get
            {
                return this.GetTable<TLDB>();
            }
        }

        public Devart.Data.Linq.Table<TLMBSAccount> TLMBSAccounts
        {
            get
            {
                return this.GetTable<TLMBSAccount>();
            }
        }

        public Devart.Data.Linq.Table<TLDKKCustomerNumber> TLDKKCustomerNumbers
        {
            get
            {
                return this.GetTable<TLDKKCustomerNumber>();
            }
        }

        public Devart.Data.Linq.Table<TLDDHLInvoiceExclusion> TLDDHLInvoiceExclusions
        {
            get
            {
                return this.GetTable<TLDDHLInvoiceExclusion>();
            }
        }

        public Devart.Data.Linq.Table<TLSSetting> TLSSettings
        {
            get
            {
                return this.GetTable<TLSSetting>();
            }
        }

        public Devart.Data.Linq.Table<TLSSyncLog> TLSSyncLogs
        {
            get
            {
                return this.GetTable<TLSSyncLog>();
            }
        }

        public Devart.Data.Linq.Table<TLSUpdateLog> TLSUpdateLogs
        {
            get
            {
                return this.GetTable<TLSUpdateLog>();
            }
        }

        public Devart.Data.Linq.Table<TLDBSBudget> TLDBSBudgets
        {
            get
            {
                return this.GetTable<TLDBSBudget>();
            }
        }

        public Devart.Data.Linq.Table<TLMReportStructure> TLMReportStructures
        {
            get
            {
                return this.GetTable<TLMReportStructure>();
            }
        }

        public Devart.Data.Linq.Table<TLDDistributorProductAccountId> TLDDistributorProductAccountIds
        {
            get
            {
                return this.GetTable<TLDDistributorProductAccountId>();
            }
        }

        public Devart.Data.Linq.Table<TLMDistributor> TLMDistributors
        {
            get
            {
                return this.GetTable<TLMDistributor>();
            }
        }

        public Devart.Data.Linq.Table<TLDRepto> TLDReptos
        {
            get
            {
                return this.GetTable<TLDRepto>();
            }
        }
    }
}

namespace LocalModelContext
{

    /// <summary>
    /// There are no comments for LocalModelContext.TLDDHLCustomerNumber in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDDHLCustomerNumber")]
    public partial class TLDDHLCustomerNumber : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _CustomerName;

        private string _MYOBCardId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnMYOBCardIdChanging(string value);
        partial void OnMYOBCardIdChanged();
        #endregion

        public TLDDHLCustomerNumber()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerName in the schema.
        /// </summary>
        [Column(Storage = "_CustomerName", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerName
        {
            get
            {
                return this._CustomerName;
            }
            set
            {
                if (this._CustomerName != value)
                {
                    this.OnCustomerNameChanging(value);
                    this.SendPropertyChanging("CustomerName");
                    this._CustomerName = value;
                    this.SendPropertyChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MYOBCardId in the schema.
        /// </summary>
        [Column(Storage = "_MYOBCardId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MYOBCardId
        {
            get
            {
                return this._MYOBCardId;
            }
            set
            {
                if (this._MYOBCardId != value)
                {
                    this.OnMYOBCardIdChanging(value);
                    this.SendPropertyChanging("MYOBCardId");
                    this._MYOBCardId = value;
                    this.SendPropertyChanged("MYOBCardId");
                    this.OnMYOBCardIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLMPLAccount in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLMPLAccounts")]
    public partial class TLMPLAccount : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _AccountId;

        private string _AccountDescription;

        private string _ParentAccountId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        partial void OnAccountDescriptionChanging(string value);
        partial void OnAccountDescriptionChanged();
        partial void OnParentAccountIdChanging(string value);
        partial void OnParentAccountIdChanged();
        #endregion

        public TLMPLAccount()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Storage = "_AccountId", CanBeNull = false, DbType = "CHAR NOT NULL", IsPrimaryKey = true)]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging("AccountId");
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountDescription in the schema.
        /// </summary>
        [Column(Storage = "_AccountDescription", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountDescription
        {
            get
            {
                return this._AccountDescription;
            }
            set
            {
                if (this._AccountDescription != value)
                {
                    this.OnAccountDescriptionChanging(value);
                    this.SendPropertyChanging("AccountDescription");
                    this._AccountDescription = value;
                    this.SendPropertyChanged("AccountDescription");
                    this.OnAccountDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentAccountId in the schema.
        /// </summary>
        [Column(Storage = "_ParentAccountId", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ParentAccountId
        {
            get
            {
                return this._ParentAccountId;
            }
            set
            {
                if (this._ParentAccountId != value)
                {
                    this.OnParentAccountIdChanging(value);
                    this.SendPropertyChanging("ParentAccountId");
                    this._ParentAccountId = value;
                    this.SendPropertyChanged("ParentAccountId");
                    this.OnParentAccountIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLMReport in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLMReports")]
    public partial class TLMReport : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReportId;

        private long _ReportType;

        private string _ReportDescription;

        private long _StatusId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReportIdChanging(int value);
        partial void OnReportIdChanged();
        partial void OnReportTypeChanging(long value);
        partial void OnReportTypeChanged();
        partial void OnReportDescriptionChanging(string value);
        partial void OnReportDescriptionChanged();
        partial void OnStatusIdChanging(long value);
        partial void OnStatusIdChanged();
        #endregion

        public TLMReport()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReportId in the schema.
        /// </summary>
        [Column(Storage = "_ReportId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ReportId
        {
            get
            {
                return this._ReportId;
            }
            set
            {
                if (this._ReportId != value)
                {
                    this.OnReportIdChanging(value);
                    this.SendPropertyChanging("ReportId");
                    this._ReportId = value;
                    this.SendPropertyChanged("ReportId");
                    this.OnReportIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportType in the schema.
        /// </summary>
        [Column(Storage = "_ReportType", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long ReportType
        {
            get
            {
                return this._ReportType;
            }
            set
            {
                if (this._ReportType != value)
                {
                    this.OnReportTypeChanging(value);
                    this.SendPropertyChanging("ReportType");
                    this._ReportType = value;
                    this.SendPropertyChanged("ReportType");
                    this.OnReportTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportDescription in the schema.
        /// </summary>
        [Column(Storage = "_ReportDescription", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ReportDescription
        {
            get
            {
                return this._ReportDescription;
            }
            set
            {
                if (this._ReportDescription != value)
                {
                    this.OnReportDescriptionChanging(value);
                    this.SendPropertyChanging("ReportDescription");
                    this._ReportDescription = value;
                    this.SendPropertyChanged("ReportDescription");
                    this.OnReportDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StatusId in the schema.
        /// </summary>
        [Column(Storage = "_StatusId", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long StatusId
        {
            get
            {
                return this._StatusId;
            }
            set
            {
                if (this._StatusId != value)
                {
                    this.OnStatusIdChanging(value);
                    this.SendPropertyChanging("StatusId");
                    this._StatusId = value;
                    this.SendPropertyChanged("StatusId");
                    this.OnStatusIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLMReportHeading in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLMReportHeadings")]
    public partial class TLMReportHeading : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReportId;

        private int _HeadingId;

        private string _ReportHeading;

        private int _IsCalculation;

        private int _HasChildren;

        private int _IncomeAsNegative;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReportIdChanging(int value);
        partial void OnReportIdChanged();
        partial void OnHeadingIdChanging(int value);
        partial void OnHeadingIdChanged();
        partial void OnReportHeadingChanging(string value);
        partial void OnReportHeadingChanged();
        partial void OnIsCalculationChanging(int value);
        partial void OnIsCalculationChanged();
        partial void OnHasChildrenChanging(int value);
        partial void OnHasChildrenChanged();
        partial void OnIncomeAsNegativeChanging(int value);
        partial void OnIncomeAsNegativeChanged();
        #endregion

        public TLMReportHeading()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReportId in the schema.
        /// </summary>
        [Column(Storage = "_ReportId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ReportId
        {
            get
            {
                return this._ReportId;
            }
            set
            {
                if (this._ReportId != value)
                {
                    this.OnReportIdChanging(value);
                    this.SendPropertyChanging("ReportId");
                    this._ReportId = value;
                    this.SendPropertyChanged("ReportId");
                    this.OnReportIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeadingId in the schema.
        /// </summary>
        [Column(Storage = "_HeadingId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int HeadingId
        {
            get
            {
                return this._HeadingId;
            }
            set
            {
                if (this._HeadingId != value)
                {
                    this.OnHeadingIdChanging(value);
                    this.SendPropertyChanging("HeadingId");
                    this._HeadingId = value;
                    this.SendPropertyChanged("HeadingId");
                    this.OnHeadingIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportHeading in the schema.
        /// </summary>
        [Column(Storage = "_ReportHeading", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ReportHeading
        {
            get
            {
                return this._ReportHeading;
            }
            set
            {
                if (this._ReportHeading != value)
                {
                    this.OnReportHeadingChanging(value);
                    this.SendPropertyChanging("ReportHeading");
                    this._ReportHeading = value;
                    this.SendPropertyChanged("ReportHeading");
                    this.OnReportHeadingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsCalculation in the schema.
        /// </summary>
        [Column(Storage = "_IsCalculation", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IsCalculation
        {
            get
            {
                return this._IsCalculation;
            }
            set
            {
                if (this._IsCalculation != value)
                {
                    this.OnIsCalculationChanging(value);
                    this.SendPropertyChanging("IsCalculation");
                    this._IsCalculation = value;
                    this.SendPropertyChanged("IsCalculation");
                    this.OnIsCalculationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HasChildren in the schema.
        /// </summary>
        [Column(Storage = "_HasChildren", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int HasChildren
        {
            get
            {
                return this._HasChildren;
            }
            set
            {
                if (this._HasChildren != value)
                {
                    this.OnHasChildrenChanging(value);
                    this.SendPropertyChanging("HasChildren");
                    this._HasChildren = value;
                    this.SendPropertyChanged("HasChildren");
                    this.OnHasChildrenChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncomeAsNegative in the schema.
        /// </summary>
        [Column(Storage = "_IncomeAsNegative", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IncomeAsNegative
        {
            get
            {
                return this._IncomeAsNegative;
            }
            set
            {
                if (this._IncomeAsNegative != value)
                {
                    this.OnIncomeAsNegativeChanging(value);
                    this.SendPropertyChanging("IncomeAsNegative");
                    this._IncomeAsNegative = value;
                    this.SendPropertyChanged("IncomeAsNegative");
                    this.OnIncomeAsNegativeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDPLBudget in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDPLBudget")]
    public partial class TLDPLBudget : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MAId;

        private string _Period;

        private double _Budget;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMAIdChanging(string value);
        partial void OnMAIdChanged();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnBudgetChanging(double value);
        partial void OnBudgetChanged();
        #endregion

        public TLDPLBudget()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MAId in the schema.
        /// </summary>
        [Column(Storage = "_MAId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string MAId
        {
            get
            {
                return this._MAId;
            }
            set
            {
                if (this._MAId != value)
                {
                    this.OnMAIdChanging(value);
                    this.SendPropertyChanging("MAId");
                    this._MAId = value;
                    this.SendPropertyChanged("MAId");
                    this.OnMAIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Storage = "_Period", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging("Period");
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Budget in the schema.
        /// </summary>
        [Column(Storage = "_Budget", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Budget
        {
            get
            {
                return this._Budget;
            }
            set
            {
                if (this._Budget != value)
                {
                    this.OnBudgetChanging(value);
                    this.SendPropertyChanging("Budget");
                    this._Budget = value;
                    this.SendPropertyChanged("Budget");
                    this.OnBudgetChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDPL in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDPL")]
    public partial class TLDPL : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Period;

        private string _AccountId;

        private double _Actual;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        partial void OnActualChanging(double value);
        partial void OnActualChanged();
        #endregion

        public TLDPL()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Storage = "_Period", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging("Period");
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Storage = "_AccountId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging("AccountId");
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Actual in the schema.
        /// </summary>
        [Column(Storage = "_Actual", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Actual
        {
            get
            {
                return this._Actual;
            }
            set
            {
                if (this._Actual != value)
                {
                    this.OnActualChanging(value);
                    this.SendPropertyChanging("Actual");
                    this._Actual = value;
                    this.SendPropertyChanged("Actual");
                    this.OnActualChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDB in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDBS")]
    public partial class TLDB : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _AccountId;

        private string _Period;

        private double _Actual;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnActualChanging(double value);
        partial void OnActualChanged();
        #endregion

        public TLDB()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Storage = "_AccountId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging("AccountId");
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Storage = "_Period", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging("Period");
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Actual in the schema.
        /// </summary>
        [Column(Storage = "_Actual", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Actual
        {
            get
            {
                return this._Actual;
            }
            set
            {
                if (this._Actual != value)
                {
                    this.OnActualChanging(value);
                    this.SendPropertyChanging("Actual");
                    this._Actual = value;
                    this.SendPropertyChanged("Actual");
                    this.OnActualChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLMBSAccount in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLMBSAccounts")]
    public partial class TLMBSAccount : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _AccountId;

        private string _AccountDescription;

        private string _ParentAccountId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        partial void OnAccountDescriptionChanging(string value);
        partial void OnAccountDescriptionChanged();
        partial void OnParentAccountIdChanging(string value);
        partial void OnParentAccountIdChanged();
        #endregion

        public TLMBSAccount()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Storage = "_AccountId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging("AccountId");
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountDescription in the schema.
        /// </summary>
        [Column(Storage = "_AccountDescription", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountDescription
        {
            get
            {
                return this._AccountDescription;
            }
            set
            {
                if (this._AccountDescription != value)
                {
                    this.OnAccountDescriptionChanging(value);
                    this.SendPropertyChanging("AccountDescription");
                    this._AccountDescription = value;
                    this.SendPropertyChanged("AccountDescription");
                    this.OnAccountDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentAccountId in the schema.
        /// </summary>
        [Column(Storage = "_ParentAccountId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ParentAccountId
        {
            get
            {
                return this._ParentAccountId;
            }
            set
            {
                if (this._ParentAccountId != value)
                {
                    this.OnParentAccountIdChanging(value);
                    this.SendPropertyChanging("ParentAccountId");
                    this._ParentAccountId = value;
                    this.SendPropertyChanged("ParentAccountId");
                    this.OnParentAccountIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDKKCustomerNumber in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDKKCustomerNumber")]
    public partial class TLDKKCustomerNumber : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Id;

        private string _CustomerName;

        private string _MYOBCardId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnCustomerNameChanging(string value);
        partial void OnCustomerNameChanged();
        partial void OnMYOBCardIdChanging(string value);
        partial void OnMYOBCardIdChanged();
        #endregion

        public TLDKKCustomerNumber()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CustomerName in the schema.
        /// </summary>
        [Column(Storage = "_CustomerName", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CustomerName
        {
            get
            {
                return this._CustomerName;
            }
            set
            {
                if (this._CustomerName != value)
                {
                    this.OnCustomerNameChanging(value);
                    this.SendPropertyChanging("CustomerName");
                    this._CustomerName = value;
                    this.SendPropertyChanged("CustomerName");
                    this.OnCustomerNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MYOBCardId in the schema.
        /// </summary>
        [Column(Storage = "_MYOBCardId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string MYOBCardId
        {
            get
            {
                return this._MYOBCardId;
            }
            set
            {
                if (this._MYOBCardId != value)
                {
                    this.OnMYOBCardIdChanging(value);
                    this.SendPropertyChanging("MYOBCardId");
                    this._MYOBCardId = value;
                    this.SendPropertyChanged("MYOBCardId");
                    this.OnMYOBCardIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDDHLInvoiceExclusion in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDDHLInvoiceExclusions")]
    public partial class TLDDHLInvoiceExclusion : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Period;

        private string _Exclusions;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnExclusionsChanging(string value);
        partial void OnExclusionsChanged();
        #endregion

        public TLDDHLInvoiceExclusion()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Storage = "_Period", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging("Period");
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Exclusions in the schema.
        /// </summary>
        [Column(Storage = "_Exclusions", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Exclusions
        {
            get
            {
                return this._Exclusions;
            }
            set
            {
                if (this._Exclusions != value)
                {
                    this.OnExclusionsChanging(value);
                    this.SendPropertyChanging("Exclusions");
                    this._Exclusions = value;
                    this.SendPropertyChanged("Exclusions");
                    this.OnExclusionsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLSSetting in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLSSettings")]
    public partial class TLSSetting : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _ImportExclusionAccounts;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnImportExclusionAccountsChanging(string value);
        partial void OnImportExclusionAccountsChanged();
        #endregion

        public TLSSetting()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ImportExclusionAccounts in the schema.
        /// </summary>
        [Column(Storage = "_ImportExclusionAccounts", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ImportExclusionAccounts
        {
            get
            {
                return this._ImportExclusionAccounts;
            }
            set
            {
                if (this._ImportExclusionAccounts != value)
                {
                    this.OnImportExclusionAccountsChanging(value);
                    this.SendPropertyChanging("ImportExclusionAccounts");
                    this._ImportExclusionAccounts = value;
                    this.SendPropertyChanged("ImportExclusionAccounts");
                    this.OnImportExclusionAccountsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLSSyncLog in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLSSyncLog")]
    public partial class TLSSyncLog : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _UpdateId;

        private string _Variant;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnVariantChanging(string value);
        partial void OnVariantChanged();
        #endregion

        public TLSSyncLog()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Storage = "_UpdateId", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging("UpdateId");
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Variant in the schema.
        /// </summary>
        [Column(Storage = "_Variant", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
        public string Variant
        {
            get
            {
                return this._Variant;
            }
            set
            {
                if (this._Variant != value)
                {
                    this.OnVariantChanging(value);
                    this.SendPropertyChanging("Variant");
                    this._Variant = value;
                    this.SendPropertyChanged("Variant");
                    this.OnVariantChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLSUpdateLog in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLSUpdateLog")]
    public partial class TLSUpdateLog : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _UpdateId;

        private string _Variant;

        private string _UTCDateTimePresent;

        private string _Payload;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUpdateIdChanging(string value);
        partial void OnUpdateIdChanged();
        partial void OnVariantChanging(string value);
        partial void OnVariantChanged();
        partial void OnUTCDateTimePresentChanging(string value);
        partial void OnUTCDateTimePresentChanged();
        partial void OnPayloadChanging(string value);
        partial void OnPayloadChanged();
        #endregion

        public TLSUpdateLog()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UpdateId in the schema.
        /// </summary>
        [Column(Storage = "_UpdateId", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
        public string UpdateId
        {
            get
            {
                return this._UpdateId;
            }
            set
            {
                if (this._UpdateId != value)
                {
                    this.OnUpdateIdChanging(value);
                    this.SendPropertyChanging("UpdateId");
                    this._UpdateId = value;
                    this.SendPropertyChanged("UpdateId");
                    this.OnUpdateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Variant in the schema.
        /// </summary>
        [Column(Storage = "_Variant", CanBeNull = false, DbType = "TEXT NOT NULL", IsPrimaryKey = true)]
        public string Variant
        {
            get
            {
                return this._Variant;
            }
            set
            {
                if (this._Variant != value)
                {
                    this.OnVariantChanging(value);
                    this.SendPropertyChanging("Variant");
                    this._Variant = value;
                    this.SendPropertyChanged("Variant");
                    this.OnVariantChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UTCDateTimePresent in the schema.
        /// </summary>
        [Column(Storage = "_UTCDateTimePresent", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UTCDateTimePresent
        {
            get
            {
                return this._UTCDateTimePresent;
            }
            set
            {
                if (this._UTCDateTimePresent != value)
                {
                    this.OnUTCDateTimePresentChanging(value);
                    this.SendPropertyChanging("UTCDateTimePresent");
                    this._UTCDateTimePresent = value;
                    this.SendPropertyChanged("UTCDateTimePresent");
                    this.OnUTCDateTimePresentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Payload in the schema.
        /// </summary>
        [Column(Storage = "_Payload", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Payload
        {
            get
            {
                return this._Payload;
            }
            set
            {
                if (this._Payload != value)
                {
                    this.OnPayloadChanging(value);
                    this.SendPropertyChanging("Payload");
                    this._Payload = value;
                    this.SendPropertyChanged("Payload");
                    this.OnPayloadChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDBSBudget in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDBSBudget")]
    public partial class TLDBSBudget : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _MAId;

        private string _Period;

        private double _Budget;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMAIdChanging(string value);
        partial void OnMAIdChanged();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnBudgetChanging(double value);
        partial void OnBudgetChanged();
        #endregion

        public TLDBSBudget()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MAId in the schema.
        /// </summary>
        [Column(Storage = "_MAId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string MAId
        {
            get
            {
                return this._MAId;
            }
            set
            {
                if (this._MAId != value)
                {
                    this.OnMAIdChanging(value);
                    this.SendPropertyChanging("MAId");
                    this._MAId = value;
                    this.SendPropertyChanged("MAId");
                    this.OnMAIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Storage = "_Period", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging("Period");
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Budget in the schema.
        /// </summary>
        [Column(Storage = "_Budget", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Budget
        {
            get
            {
                return this._Budget;
            }
            set
            {
                if (this._Budget != value)
                {
                    this.OnBudgetChanging(value);
                    this.SendPropertyChanging("Budget");
                    this._Budget = value;
                    this.SendPropertyChanged("Budget");
                    this.OnBudgetChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLMReportStructure in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLMReportStructure")]
    public partial class TLMReportStructure : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ReportId;

        private int _HeadingId;

        private int _ItemId;

        private string _ReportDescription;

        private string _AccountItems;

        private int _SequenceIndex;

        private string _GroupItems;

        private long? _IsGrouping;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnReportIdChanging(int value);
        partial void OnReportIdChanged();
        partial void OnHeadingIdChanging(int value);
        partial void OnHeadingIdChanged();
        partial void OnItemIdChanging(int value);
        partial void OnItemIdChanged();
        partial void OnReportDescriptionChanging(string value);
        partial void OnReportDescriptionChanged();
        partial void OnAccountItemsChanging(string value);
        partial void OnAccountItemsChanged();
        partial void OnSequenceIndexChanging(int value);
        partial void OnSequenceIndexChanged();
        partial void OnGroupItemsChanging(string value);
        partial void OnGroupItemsChanged();
        partial void OnIsGroupingChanging(long? value);
        partial void OnIsGroupingChanged();
        #endregion

        public TLMReportStructure()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ReportId in the schema.
        /// </summary>
        [Column(Storage = "_ReportId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ReportId
        {
            get
            {
                return this._ReportId;
            }
            set
            {
                if (this._ReportId != value)
                {
                    this.OnReportIdChanging(value);
                    this.SendPropertyChanging("ReportId");
                    this._ReportId = value;
                    this.SendPropertyChanged("ReportId");
                    this.OnReportIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for HeadingId in the schema.
        /// </summary>
        [Column(Storage = "_HeadingId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int HeadingId
        {
            get
            {
                return this._HeadingId;
            }
            set
            {
                if (this._HeadingId != value)
                {
                    this.OnHeadingIdChanging(value);
                    this.SendPropertyChanging("HeadingId");
                    this._HeadingId = value;
                    this.SendPropertyChanged("HeadingId");
                    this.OnHeadingIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemId in the schema.
        /// </summary>
        [Column(Storage = "_ItemId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int ItemId
        {
            get
            {
                return this._ItemId;
            }
            set
            {
                if (this._ItemId != value)
                {
                    this.OnItemIdChanging(value);
                    this.SendPropertyChanging("ItemId");
                    this._ItemId = value;
                    this.SendPropertyChanged("ItemId");
                    this.OnItemIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportDescription in the schema.
        /// </summary>
        [Column(Storage = "_ReportDescription", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ReportDescription
        {
            get
            {
                return this._ReportDescription;
            }
            set
            {
                if (this._ReportDescription != value)
                {
                    this.OnReportDescriptionChanging(value);
                    this.SendPropertyChanging("ReportDescription");
                    this._ReportDescription = value;
                    this.SendPropertyChanged("ReportDescription");
                    this.OnReportDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountItems in the schema.
        /// </summary>
        [Column(Storage = "_AccountItems", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountItems
        {
            get
            {
                return this._AccountItems;
            }
            set
            {
                if (this._AccountItems != value)
                {
                    this.OnAccountItemsChanging(value);
                    this.SendPropertyChanging("AccountItems");
                    this._AccountItems = value;
                    this.SendPropertyChanged("AccountItems");
                    this.OnAccountItemsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SequenceIndex in the schema.
        /// </summary>
        [Column(Storage = "_SequenceIndex", CanBeNull = false, DbType = "INT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SequenceIndex
        {
            get
            {
                return this._SequenceIndex;
            }
            set
            {
                if (this._SequenceIndex != value)
                {
                    this.OnSequenceIndexChanging(value);
                    this.SendPropertyChanging("SequenceIndex");
                    this._SequenceIndex = value;
                    this.SendPropertyChanged("SequenceIndex");
                    this.OnSequenceIndexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupItems in the schema.
        /// </summary>
        [Column(Storage = "_GroupItems", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GroupItems
        {
            get
            {
                return this._GroupItems;
            }
            set
            {
                if (this._GroupItems != value)
                {
                    this.OnGroupItemsChanging(value);
                    this.SendPropertyChanging("GroupItems");
                    this._GroupItems = value;
                    this.SendPropertyChanged("GroupItems");
                    this.OnGroupItemsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsGrouping in the schema.
        /// </summary>
        [Column(Storage = "_IsGrouping", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public long? IsGrouping
        {
            get
            {
                return this._IsGrouping;
            }
            set
            {
                if (this._IsGrouping != value)
                {
                    this.OnIsGroupingChanging(value);
                    this.SendPropertyChanging("IsGrouping");
                    this._IsGrouping = value;
                    this.SendPropertyChanged("IsGrouping");
                    this.OnIsGroupingChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDDistributorProductAccountId in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDDistributorProductAccountId")]
    public partial class TLDDistributorProductAccountId : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _DistributorId;

        private string _ProductPDE;

        private string _AccountId;

        private string _Product;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDistributorIdChanging(long value);
        partial void OnDistributorIdChanged();
        partial void OnProductPDEChanging(string value);
        partial void OnProductPDEChanged();
        partial void OnAccountIdChanging(string value);
        partial void OnAccountIdChanged();
        partial void OnProductChanging(string value);
        partial void OnProductChanged();
        #endregion

        public TLDDistributorProductAccountId()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DistributorId in the schema.
        /// </summary>
        [Column(Storage = "_DistributorId", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public long DistributorId
        {
            get
            {
                return this._DistributorId;
            }
            set
            {
                if (this._DistributorId != value)
                {
                    this.OnDistributorIdChanging(value);
                    this.SendPropertyChanging("DistributorId");
                    this._DistributorId = value;
                    this.SendPropertyChanged("DistributorId");
                    this.OnDistributorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductPDE in the schema.
        /// </summary>
        [Column(Storage = "_ProductPDE", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string ProductPDE
        {
            get
            {
                return this._ProductPDE;
            }
            set
            {
                if (this._ProductPDE != value)
                {
                    this.OnProductPDEChanging(value);
                    this.SendPropertyChanging("ProductPDE");
                    this._ProductPDE = value;
                    this.SendPropertyChanged("ProductPDE");
                    this.OnProductPDEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountId in the schema.
        /// </summary>
        [Column(Storage = "_AccountId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string AccountId
        {
            get
            {
                return this._AccountId;
            }
            set
            {
                if (this._AccountId != value)
                {
                    this.OnAccountIdChanging(value);
                    this.SendPropertyChanging("AccountId");
                    this._AccountId = value;
                    this.SendPropertyChanged("AccountId");
                    this.OnAccountIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Product in the schema.
        /// </summary>
        [Column(Storage = "_Product", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Product
        {
            get
            {
                return this._Product;
            }
            set
            {
                if (this._Product != value)
                {
                    this.OnProductChanging(value);
                    this.SendPropertyChanging("Product");
                    this._Product = value;
                    this.SendPropertyChanged("Product");
                    this.OnProductChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLMDistributor in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLMDistributor")]
    public partial class TLMDistributor : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _DistributorId;

        private string _Distributor;

        private string _CardId;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDistributorIdChanging(int value);
        partial void OnDistributorIdChanged();
        partial void OnDistributorChanging(string value);
        partial void OnDistributorChanged();
        partial void OnCardIdChanging(string value);
        partial void OnCardIdChanged();
        #endregion

        public TLMDistributor()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DistributorId in the schema.
        /// </summary>
        [Column(Storage = "_DistributorId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int DistributorId
        {
            get
            {
                return this._DistributorId;
            }
            set
            {
                if (this._DistributorId != value)
                {
                    this.OnDistributorIdChanging(value);
                    this.SendPropertyChanging("DistributorId");
                    this._DistributorId = value;
                    this.SendPropertyChanged("DistributorId");
                    this.OnDistributorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Distributor in the schema.
        /// </summary>
        [Column(Storage = "_Distributor", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Distributor
        {
            get
            {
                return this._Distributor;
            }
            set
            {
                if (this._Distributor != value)
                {
                    this.OnDistributorChanging(value);
                    this.SendPropertyChanging("Distributor");
                    this._Distributor = value;
                    this.SendPropertyChanged("Distributor");
                    this.OnDistributorChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CardId in the schema.
        /// </summary>
        [Column(Storage = "_CardId", CanBeNull = false, DbType = "NVARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CardId
        {
            get
            {
                return this._CardId;
            }
            set
            {
                if (this._CardId != value)
                {
                    this.OnCardIdChanging(value);
                    this.SendPropertyChanging("CardId");
                    this._CardId = value;
                    this.SendPropertyChanged("CardId");
                    this.OnCardIdChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for LocalModelContext.TLDRepto in the schema.
    /// </summary>
    [Table(Name = @"""main"".TLDReptos")]
    public partial class TLDRepto : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _DistributorId;

        private string _Period;

        private string _Invoice;

        private string _AccountNumber;

        private double _Claim;

        private double _ClaimGST;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnDistributorIdChanging(int value);
        partial void OnDistributorIdChanged();
        partial void OnPeriodChanging(string value);
        partial void OnPeriodChanged();
        partial void OnInvoiceChanging(string value);
        partial void OnInvoiceChanged();
        partial void OnAccountNumberChanging(string value);
        partial void OnAccountNumberChanged();
        partial void OnClaimChanging(double value);
        partial void OnClaimChanged();
        partial void OnClaimGSTChanging(double value);
        partial void OnClaimGSTChanged();
        #endregion

        public TLDRepto()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for DistributorId in the schema.
        /// </summary>
        [Column(Storage = "_DistributorId", CanBeNull = false, DbType = "INT NOT NULL", IsPrimaryKey = true)]
        public int DistributorId
        {
            get
            {
                return this._DistributorId;
            }
            set
            {
                if (this._DistributorId != value)
                {
                    this.OnDistributorIdChanging(value);
                    this.SendPropertyChanging("DistributorId");
                    this._DistributorId = value;
                    this.SendPropertyChanged("DistributorId");
                    this.OnDistributorIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Period in the schema.
        /// </summary>
        [Column(Storage = "_Period", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Period
        {
            get
            {
                return this._Period;
            }
            set
            {
                if (this._Period != value)
                {
                    this.OnPeriodChanging(value);
                    this.SendPropertyChanging("Period");
                    this._Period = value;
                    this.SendPropertyChanged("Period");
                    this.OnPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Invoice in the schema.
        /// </summary>
        [Column(Storage = "_Invoice", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string Invoice
        {
            get
            {
                return this._Invoice;
            }
            set
            {
                if (this._Invoice != value)
                {
                    this.OnInvoiceChanging(value);
                    this.SendPropertyChanging("Invoice");
                    this._Invoice = value;
                    this.SendPropertyChanged("Invoice");
                    this.OnInvoiceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountNumber in the schema.
        /// </summary>
        [Column(Storage = "_AccountNumber", CanBeNull = false, DbType = "NVARCHAR NOT NULL", IsPrimaryKey = true)]
        public string AccountNumber
        {
            get
            {
                return this._AccountNumber;
            }
            set
            {
                if (this._AccountNumber != value)
                {
                    this.OnAccountNumberChanging(value);
                    this.SendPropertyChanging("AccountNumber");
                    this._AccountNumber = value;
                    this.SendPropertyChanged("AccountNumber");
                    this.OnAccountNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Claim in the schema.
        /// </summary>
        [Column(Storage = "_Claim", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double Claim
        {
            get
            {
                return this._Claim;
            }
            set
            {
                if (this._Claim != value)
                {
                    this.OnClaimChanging(value);
                    this.SendPropertyChanging("Claim");
                    this._Claim = value;
                    this.SendPropertyChanged("Claim");
                    this.OnClaimChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ClaimGST in the schema.
        /// </summary>
        [Column(Storage = "_ClaimGST", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public double ClaimGST
        {
            get
            {
                return this._ClaimGST;
            }
            set
            {
                if (this._ClaimGST != value)
                {
                    this.OnClaimGSTChanging(value);
                    this.SendPropertyChanging("ClaimGST");
                    this._ClaimGST = value;
                    this.SendPropertyChanged("ClaimGST");
                    this.OnClaimGSTChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
